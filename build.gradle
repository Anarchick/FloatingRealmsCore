plugins {
    id 'java'
}

group = 'fr.anarchick'
version = '1.0.0'

def mcVersion = '1.20'
def mcSubVersion = '.4'
def protocolLibVersion = '5.1.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven { url "https://repo.dmulloy2.net/repository/public/" } // ProtocolLib
    maven { url "https://jitpack.io" } // Github repositories
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    compileOnly group: 'io.papermc.paper', name: 'paper-api', version: mcVersion + mcSubVersion + '-R0.1-SNAPSHOT'
    compileOnly group: "com.comphenix.protocol", name: "ProtocolLib", version: protocolLibVersion
    implementation 'com.github.Anarchick:CanI:main-SNAPSHOT'
    //implementation 'com.github.Anarchick:Anapi:main-SNAPSHOT'
    compileOnly fileTree(include: ['*.jar'], dir: 'libs')
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

task export() {
    group = "other"
    description = "build gradle into external folder"
    def fromFile = 'build/libs/'+archivesBaseName+'-'+version+'.jar'
    def destinations = [
            'C:/Users/aeim/Documents/minecraft/law/server/FloatingRealms/plugins'
    ]
    doLast {
        destinations.each {dest ->
            def destDir = file(dest)
            if (destDir.exists()) {
                copy {
                    from fromFile
                    into destDir
                }
            } else {
                println "The folder '" + destDir + "' does not exist"
            }
        }
    }
}

build.finalizedBy export